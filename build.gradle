/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.6/samples
 * This project uses @Incubating APIs which are subject to change.
 */

//

plugins {
    id 'java-library'

    id 'com.gradleup.shadow' version '8.3.0'
    id 'java'

    id 'io.typecraft.gradlesource.spigot' version '1.0.0'
}

//

ext {
    isReleaseBuild = project.hasProperty("release-build")
    nmsVersion = '1.20.6'
}

//

if(!project.ext.isReleaseBuild) {
    layout.buildDirectory.set(layout.projectDirectory.dir("dev-build"))
}

//

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://oss.sonatype.org/content/repositories/central' }

    maven { url 'https://libraries.minecraft.net/'}

    maven { url 'https://jitpack.io/'}
    maven { url 'https://maven.onedevman.eu.org/' }
}

//

dependencies {
    compileOnly "org.spigotmc:spigot:${project.ext.nmsVersion}-R0.1-SNAPSHOT:remapped-mojang"
    compileOnly "org.spigotmc:minecraft-server:${project.ext.nmsVersion}-R0.1-SNAPSHOT"

    //

    if(project.ext.isReleaseBuild) implementation "com.github.onedevman-devmc:Compendium:main-SNAPSHOT"
    else compileOnly files("../Compendium/build/libs/Compendium-1.0-beta1.jar")
}

//

group = 'mc.onedevman.plugins'
version = '1.0-beta1'
description = ''
java.sourceCompatibility = JavaVersion.VERSION_17

if(!project.ext.isReleaseBuild) sourceSets.main.java.srcDirs += 'src/dev/java/'

//

jar {
    archiveBaseName.set("${project.name}-${project.version}.original")
    archiveVersion.set('')
    archiveClassifier.set(project.ext.isReleaseBuild ? '' : 'dev')
}

shadowJar {
    archiveBaseName.set("${project.name}-${project.version}")
    archiveVersion.set('')
    archiveClassifier.set(project.ext.isReleaseBuild ? '' : 'dev')

    //

    if(project.ext.isReleaseBuild) relocate('mc.compendium', 'mc.barrelshop.compendium')
}

spigotRemap {
    spigotVersion.set("${project.ext.nmsVersion}")
    sourceJarTask.set(tasks.shadowJar)
}

//

def releaseJar = layout.projectDirectory.file("dest/${project.name}.jar").asFile

def cleanReleaseJar = tasks.register('cleanReleaseJar') {
    if(releaseJar.exists()) releaseJar.delete()
}

def createReleaseJar = tasks.register('createReleaseJar') {
    doLast {
        def srcfile = shadowJar.archiveFile

        copy {
            from srcfile
            into releaseJar.parentFile
            rename srcfile.get().asFile.name, releaseJar.name
        }
    }
}

//

def publishRelease = tasks.register("publish-release") {
    def tag = "v${project.version}"

    doLast {
        print("git tag -d ${tag}".execute().err.text)
        print("git tag ${tag}".execute().err.text)

        print("git push origin :refs/tags/${tag}".execute().err.text)

        print("git push -u origin main ${tag}".execute().err.text)
    }
}

//

tasks.clean {
    dependsOn(cleanReleaseJar)
}

tasks.build {
    if(project.ext.isReleaseBuild) dependsOn(createReleaseJar)
}

//

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}